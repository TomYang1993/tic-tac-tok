class Square extends React.Component {
  constructor(props){
    super(props);
  }
  
  render() {
    return (
      <button className="square" onClick={() => this.props.a()}>
        {this.props.value}
      </button>
    );
  }
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}

class Board extends React.Component {
  
  // constructor(props){
  //   super(props);
  //   this.state = {
  //     squares: Array(9).fill(null),
  //     xIsNext: true
  //   }
  // }
  
  renderSquare(i) {
    return <Square 
             value={this.props.squares[i]}
             a = {() => this.props.b(i)}
             />;
  }
  
  
  render() {
    
    return (
      <div>
        <div className="board-row">
          {this.renderSquare(0)}
          {this.renderSquare(1)}
          {this.renderSquare(2)}
        </div>
        <div className="board-row">
          {this.renderSquare(3)}
          {this.renderSquare(4)}
          {this.renderSquare(5)}
        </div>
        <div className="board-row">
          {this.renderSquare(6)}
          {this.renderSquare(7)}
          {this.renderSquare(8)}
        </div>
      </div>
    );
  }
}

class Game extends React.Component {
  
  constructor(props){
    super(props);
    this.state = {
      history: [{
        squares: Array(9).fill(null)
      }],
      xIsNext: true,
      stepNumber: 0
    }
  }
  
  handleClick(i){
    let history = this.state.history.slice(0, this.state.stepNumber + 1);
    let current = history[history.length -1];
    let squares = current.squares.slice();
    if(squares[i] || calculateWinner(current.squares)){
      return;
       }
    squares[i] = this.state.xIsNext?'X':'O';
    this.setState({
      history: history.concat([{
        squares: squares
      }]),
      stepNumber: this.state.stepNumber + 1,
      xIsNext: !this.state.xIsNext
    });
  }

  jumpTo(index){
    this.setState({
      stepNumber: index,
      xIsNext: (index % 2 == 0)
    })
  }
  
  render() {
    let history = this.state.history;
    let moves = history.map((step, index) => {
      const currentStep = index? ('Go To Move #'+index) : 'Start Again!';
      
      return (
        <li key={index}>
          <button onClick={() => this.jumpTo(index)}>{currentStep}</button>
        </li>
      )
    });
    
    let current = history[this.state.stepNumber];
    let winner = calculateWinner(current.squares);
    let status;
    
    if(winner){
      status = 'Winner: ' + winner;
    }else{
      status = 'Next player: ' + (this.state.xIsNext?'X':'O');
    }
    
    return (
      <div className="game">
        <div className="game-board">
          <Board squares={current.squares} b={(i) => this.handleClick(i)}/>
        </div>
        <div className="game-info">
          <div>{status}</div>
          <ol>{moves}</ol>
        </div>
      </div>
    );
  }
}

// ========================================

ReactDOM.render(
  <Game />,
  document.getElementById('root')
);